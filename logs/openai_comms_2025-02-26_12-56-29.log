2025-02-26 12:56:29,336 - openai_communications - INFO - === New OpenAI Session Started at 2025-02-26_12-56-29 ===
2025-02-26 12:56:29,336 - openai_communications - INFO - OpenAI communication logging initialized
2025-02-26 12:56:42,335 - openai_communications - INFO - PROMPT TO OpenAI:
You are an expert query categorization system for a restaurant management application. 
Analyze user queries and classify them into the correct category from the following options.

Return a valid JSON object with the following fields:
- "request_type": (REQUIRED) One of: "order_history", "update_price", "disable_item", "enable_item", "query_menu", "query_performance", "query_ratings"
- "time_period": (Optional) The specific timeframe for order_history queries
- "analysis_type": (Optional) What's being analyzed for order_history queries
- "start_date": (Optional) Start date filter in YYYY-MM-DD format
- "end_date": (Optional) End date filter in YYYY-MM-DD format
- "item_name": (Optional) Menu item name for update/disable/enable requests
- "new_price": (Optional) New price value for update_price requests

QUERY CATEGORIES:
- "order_history": Requests related to past orders, revenue, sales figures, order counts, or trends
- "update_price": Requests to change a menu item's price
- "disable_item": Requests to disable/remove a menu item from availability
- "enable_item": Requests to re-enable/restore a menu item to availability
- "query_menu": Questions about current menu, item availability, pricing, or menu structure
- "query_performance": Questions about business metrics, trends, or performance indicators
- "query_ratings": Questions about customer ratings, feedback, or satisfaction metrics

For "order_history" queries, also identify:
- time_period: The specific timeframe (today, yesterday, last week, this month, custom date range)
- analysis_type: What's being analyzed (count, revenue, details, trend, comparison)
- date_filter: EXACT date specified in format 'YYYY-MM-DD' (extract even if implied)

EXAMPLES BY CATEGORY:
1. order_history:
   - "How many orders on 2023-10-15?" → request_type="order_history", start_date="2023-10-15", end_date="2023-10-15"
   - "Show revenue from March 5th" → request_type="order_history", start_date="2024-03-05", end_date="2024-03-05", analysis_type="revenue"
   - "What were yesterday's cancellations?" → request_type="order_history", start_date="2025-02-25", end_date="2025-02-25"
   - "How many orders were completed yesterday?" → request_type="order_history", time_period="yesterday", analysis_type="count"
   - "Show revenue from last week" → request_type="order_history", time_period="last_week", analysis_type="revenue"
   - "What were our busiest days this month?" → request_type="order_history", time_period="this_month", analysis_type="trend"

2. update_price:
   - "Update the price of French Fries to $4.99" → request_type="update_price", item_name="French Fries", new_price=4.99
   - "Change Burger price to $8.50" → request_type="update_price", item_name="Burger", new_price=8.50

3. disable_item:
   - "Disable the Chocolate Cake menu item" → request_type="disable_item", item_name="Chocolate Cake"
   - "Remove Veggie Burger from the menu" → request_type="disable_item", item_name="Veggie Burger"

4. enable_item:
   - "Make the Veggie Burger available again" → request_type="enable_item", item_name="Veggie Burger"
   - "Add Apple Pie back to the menu" → request_type="enable_item", item_name="Apple Pie"

5. query_menu:
   - "Show all active dessert items" → request_type="query_menu"
   - "What vegetarian options do we have?" → request_type="query_menu"
   - "How much does the Caesar Salad cost?" → request_type="query_menu", item_name="Caesar Salad"

6. query_performance:
   - "What's our average order value this month?" → request_type="query_performance", time_period="this_month"
   - "How do weekday sales compare to weekend sales?" → request_type="query_performance", analysis_type="comparison"
   - "Which time of day has the highest sales?" → request_type="query_performance", analysis_type="trend"

7. query_ratings:
   - "Show orders with low customer ratings" → request_type="query_ratings"
   - "What menu items get the most complaints?" → request_type="query_ratings", analysis_type="complaints"
   - "What's our average customer satisfaction score?" → request_type="query_ratings", analysis_type="average"

NEW DATE HANDLING RULES:
1. CURRENT_DATE: 2025-02-26
2. PREVIOUS DATE CONTEXT: No previous dates available
3. If no dates specified, use previous context when available
4. Explicit dates always override previous context

EXAMPLE FOLLOWUPS:

    - Initial: "Orders on 2025-02-21" -> start_date=2025-02-21
    - Followup: "Total for those" -> use previous dates
    - New query: "Compare to last week" -> calculate new dates
    

CATEGORIZATION APPROACH:
1. First, check for explicit date mentions
2. If found, extract and store as date_filter
3. If no date but previous exists, add date_filter=previous
4. If no date and no previous, use CURRENT_DATE
5. First, identify the core intent (retrieving information vs. making changes)
6. For information requests, determine if they're about orders, menu items, performance, or ratings
7. For change requests, determine if they're updating prices, enabling, or disabling items
8. Look for time-related terms to identify time periods for order_history queries
9. Pay attention to verbs like "update", "change", "disable", "remove", "show", "get" as intent indicators

Make the most accurate determination based on the query's intent and content.
Respond with a JSON object containing the categorized request information.

IMPORTANT: Respond using valid JSON format.
USER QUERY: What was the busiest day of the week over the past 3 months?
2025-02-26 12:56:43,819 - openai_communications - INFO - RESPONSE FROM OpenAI:
{
  "request_type": "order_history",
  "time_period": "past_3_months",
  "analysis_type": "trend"
}
2025-02-26 12:56:43,819 - openai_communications - INFO - Model: gpt-4o-2024-08-06
2025-02-26 12:56:43,819 - openai_communications - INFO - Tokens Used: 1361
2025-02-26 12:56:43,819 - openai_communications - INFO - Valid categorization: request_type='order_history' time_period='past_3_months' analysis_type='trend' start_date=None end_date=None item_name=None new_price=None
2025-02-26 12:56:58,376 - openai_communications - INFO - === New OpenAI Session Started at 2025-02-26_12-56-58 ===
2025-02-26 12:56:58,378 - openai_communications - INFO - OpenAI communication logging initialized
2025-02-26 12:57:11,053 - openai_communications - INFO - PROMPT TO OpenAI:
You are an expert query categorization system for a restaurant management application. 
Analyze user queries and classify them into the correct category from the following options.

Return a valid JSON object with the following fields:
- "request_type": (REQUIRED) One of: "order_history", "update_price", "disable_item", "enable_item", "query_menu", "query_performance", "query_ratings"
- "time_period": (Optional) The specific timeframe for order_history queries
- "analysis_type": (Optional) What's being analyzed for order_history queries
- "start_date": (Optional) Start date filter in YYYY-MM-DD format
- "end_date": (Optional) End date filter in YYYY-MM-DD format
- "item_name": (Optional) Menu item name for update/disable/enable requests
- "new_price": (Optional) New price value for update_price requests

QUERY CATEGORIES:
- "order_history": Requests related to past orders, revenue, sales figures, order counts, or trends
- "update_price": Requests to change a menu item's price
- "disable_item": Requests to disable/remove a menu item from availability
- "enable_item": Requests to re-enable/restore a menu item to availability
- "query_menu": Questions about current menu, item availability, pricing, or menu structure
- "query_performance": Questions about business metrics, trends, or performance indicators
- "query_ratings": Questions about customer ratings, feedback, or satisfaction metrics

For "order_history" queries, also identify:
- time_period: The specific timeframe (today, yesterday, last week, this month, custom date range)
- analysis_type: What's being analyzed (count, revenue, details, trend, comparison)
- date_filter: EXACT date specified in format 'YYYY-MM-DD' (extract even if implied)

EXAMPLES BY CATEGORY:
1. order_history:
   - "How many orders on 2023-10-15?" → request_type="order_history", start_date="2023-10-15", end_date="2023-10-15"
   - "Show revenue from March 5th" → request_type="order_history", start_date="2024-03-05", end_date="2024-03-05", analysis_type="revenue"
   - "What were yesterday's cancellations?" → request_type="order_history", start_date="2025-02-25", end_date="2025-02-25"
   - "How many orders were completed yesterday?" → request_type="order_history", time_period="yesterday", analysis_type="count"
   - "Show revenue from last week" → request_type="order_history", time_period="last_week", analysis_type="revenue"
   - "What were our busiest days this month?" → request_type="order_history", time_period="this_month", analysis_type="trend"

2. update_price:
   - "Update the price of French Fries to $4.99" → request_type="update_price", item_name="French Fries", new_price=4.99
   - "Change Burger price to $8.50" → request_type="update_price", item_name="Burger", new_price=8.50

3. disable_item:
   - "Disable the Chocolate Cake menu item" → request_type="disable_item", item_name="Chocolate Cake"
   - "Remove Veggie Burger from the menu" → request_type="disable_item", item_name="Veggie Burger"

4. enable_item:
   - "Make the Veggie Burger available again" → request_type="enable_item", item_name="Veggie Burger"
   - "Add Apple Pie back to the menu" → request_type="enable_item", item_name="Apple Pie"

5. query_menu:
   - "Show all active dessert items" → request_type="query_menu"
   - "What vegetarian options do we have?" → request_type="query_menu"
   - "How much does the Caesar Salad cost?" → request_type="query_menu", item_name="Caesar Salad"

6. query_performance:
   - "What's our average order value this month?" → request_type="query_performance", time_period="this_month"
   - "How do weekday sales compare to weekend sales?" → request_type="query_performance", analysis_type="comparison"
   - "Which time of day has the highest sales?" → request_type="query_performance", analysis_type="trend"

7. query_ratings:
   - "Show orders with low customer ratings" → request_type="query_ratings"
   - "What menu items get the most complaints?" → request_type="query_ratings", analysis_type="complaints"
   - "What's our average customer satisfaction score?" → request_type="query_ratings", analysis_type="average"

NEW DATE HANDLING RULES:
1. CURRENT_DATE: 2025-02-26
2. PREVIOUS DATE CONTEXT: No previous dates available
3. If no dates specified, use previous context when available
4. Explicit dates always override previous context

EXAMPLE FOLLOWUPS:

    - Initial: "Orders on 2025-02-21" -> start_date=2025-02-21
    - Followup: "Total for those" -> use previous dates
    - New query: "Compare to last week" -> calculate new dates
    

CATEGORIZATION APPROACH:
1. First, check for explicit date mentions
2. If found, extract and store as date_filter
3. If no date but previous exists, add date_filter=previous
4. If no date and no previous, use CURRENT_DATE
5. First, identify the core intent (retrieving information vs. making changes)
6. For information requests, determine if they're about orders, menu items, performance, or ratings
7. For change requests, determine if they're updating prices, enabling, or disabling items
8. Look for time-related terms to identify time periods for order_history queries
9. Pay attention to verbs like "update", "change", "disable", "remove", "show", "get" as intent indicators

Make the most accurate determination based on the query's intent and content.
Respond with a JSON object containing the categorized request information.

IMPORTANT: Respond using valid JSON format.
USER QUERY: Who was the top customer over the past 6 months
2025-02-26 12:57:12,373 - openai_communications - INFO - RESPONSE FROM OpenAI:
{
  "request_type": "query_performance",
  "time_period": "last_6_months",
  "analysis_type": "trend"
}
2025-02-26 12:57:12,373 - openai_communications - INFO - Model: gpt-4o-2024-08-06
2025-02-26 12:57:12,373 - openai_communications - INFO - Tokens Used: 1358
2025-02-26 12:57:12,373 - openai_communications - INFO - Valid categorization: request_type='query_performance' time_period='last_6_months' analysis_type='trend' start_date=None end_date=None item_name=None new_price=None
2025-02-26 12:57:34,485 - openai_communications - INFO - === New OpenAI Session Started at 2025-02-26_12-57-34 ===
2025-02-26 12:57:34,487 - openai_communications - INFO - OpenAI communication logging initialized
2025-02-26 13:03:51,303 - openai_communications - INFO - PROMPT TO OpenAI:
You are an expert query categorization system for a restaurant management application. 
Analyze user queries and classify them into the correct category from the following options.

Return a valid JSON object with the following fields:
- "request_type": (REQUIRED) One of: "order_history", "update_price", "disable_item", "enable_item", "query_menu", "query_performance", "query_ratings"
- "time_period": (Optional) The specific timeframe for order_history queries
- "analysis_type": (Optional) What's being analyzed for order_history queries
- "start_date": (Optional) Start date filter in YYYY-MM-DD format
- "end_date": (Optional) End date filter in YYYY-MM-DD format
- "item_name": (Optional) Menu item name for update/disable/enable requests
- "new_price": (Optional) New price value for update_price requests

QUERY CATEGORIES:
- "order_history": Requests related to past orders, revenue, sales figures, order counts, or trends
- "update_price": Requests to change a menu item's price
- "disable_item": Requests to disable/remove a menu item from availability
- "enable_item": Requests to re-enable/restore a menu item to availability
- "query_menu": Questions about current menu, item availability, pricing, or menu structure
- "query_performance": Questions about business metrics, trends, or performance indicators
- "query_ratings": Questions about customer ratings, feedback, or satisfaction metrics

For "order_history" queries, also identify:
- time_period: The specific timeframe (today, yesterday, last week, this month, custom date range)
- analysis_type: What's being analyzed (count, revenue, details, trend, comparison)
- date_filter: EXACT date specified in format 'YYYY-MM-DD' (extract even if implied)

EXAMPLES BY CATEGORY:
1. order_history:
   - "How many orders on 2023-10-15?" → request_type="order_history", start_date="2023-10-15", end_date="2023-10-15"
   - "Show revenue from March 5th" → request_type="order_history", start_date="2024-03-05", end_date="2024-03-05", analysis_type="revenue"
   - "What were yesterday's cancellations?" → request_type="order_history", start_date="2025-02-25", end_date="2025-02-25"
   - "How many orders were completed yesterday?" → request_type="order_history", time_period="yesterday", analysis_type="count"
   - "Show revenue from last week" → request_type="order_history", time_period="last_week", analysis_type="revenue"
   - "What were our busiest days this month?" → request_type="order_history", time_period="this_month", analysis_type="trend"

2. update_price:
   - "Update the price of French Fries to $4.99" → request_type="update_price", item_name="French Fries", new_price=4.99
   - "Change Burger price to $8.50" → request_type="update_price", item_name="Burger", new_price=8.50

3. disable_item:
   - "Disable the Chocolate Cake menu item" → request_type="disable_item", item_name="Chocolate Cake"
   - "Remove Veggie Burger from the menu" → request_type="disable_item", item_name="Veggie Burger"

4. enable_item:
   - "Make the Veggie Burger available again" → request_type="enable_item", item_name="Veggie Burger"
   - "Add Apple Pie back to the menu" → request_type="enable_item", item_name="Apple Pie"

5. query_menu:
   - "Show all active dessert items" → request_type="query_menu"
   - "What vegetarian options do we have?" → request_type="query_menu"
   - "How much does the Caesar Salad cost?" → request_type="query_menu", item_name="Caesar Salad"

6. query_performance:
   - "What's our average order value this month?" → request_type="query_performance", time_period="this_month"
   - "How do weekday sales compare to weekend sales?" → request_type="query_performance", analysis_type="comparison"
   - "Which time of day has the highest sales?" → request_type="query_performance", analysis_type="trend"

7. query_ratings:
   - "Show orders with low customer ratings" → request_type="query_ratings"
   - "What menu items get the most complaints?" → request_type="query_ratings", analysis_type="complaints"
   - "What's our average customer satisfaction score?" → request_type="query_ratings", analysis_type="average"

NEW DATE HANDLING RULES:
1. CURRENT_DATE: 2025-02-26
2. PREVIOUS DATE CONTEXT: No previous dates available
3. If no dates specified, use previous context when available
4. Explicit dates always override previous context

EXAMPLE FOLLOWUPS:

    - Initial: "Orders on 2025-02-21" -> start_date=2025-02-21
    - Followup: "Total for those" -> use previous dates
    - New query: "Compare to last week" -> calculate new dates
    

CATEGORIZATION APPROACH:
1. First, check for explicit date mentions
2. If found, extract and store as date_filter
3. If no date but previous exists, add date_filter=previous
4. If no date and no previous, use CURRENT_DATE
5. First, identify the core intent (retrieving information vs. making changes)
6. For information requests, determine if they're about orders, menu items, performance, or ratings
7. For change requests, determine if they're updating prices, enabling, or disabling items
8. Look for time-related terms to identify time periods for order_history queries
9. Pay attention to verbs like "update", "change", "disable", "remove", "show", "get" as intent indicators

Make the most accurate determination based on the query's intent and content.
Respond with a JSON object containing the categorized request information.

IMPORTANT: Respond using valid JSON format.
USER QUERY: What was the top selling item over the past month
2025-02-26 13:03:52,403 - openai_communications - INFO - RESPONSE FROM OpenAI:
{
  "request_type": "order_history",
  "time_period": "last_month",
  "analysis_type": "trend"
}
2025-02-26 13:03:52,403 - openai_communications - INFO - Model: gpt-4o-2024-08-06
2025-02-26 13:03:52,403 - openai_communications - INFO - Tokens Used: 1353
2025-02-26 13:03:52,403 - openai_communications - INFO - Valid categorization: request_type='order_history' time_period='last_month' analysis_type='trend' start_date=None end_date=None item_name=None new_price=None
2025-02-26 13:04:08,732 - openai_communications - INFO - === New OpenAI Session Started at 2025-02-26_13-04-08 ===
2025-02-26 13:04:08,734 - openai_communications - INFO - OpenAI communication logging initialized
