[
  {
    "query": "Query revenue by menu category (query revenue by category)",
    "sql": "-- Query revenue by menu category\nSELECT c.name AS category,\n       COUNT(DISTINCT o.id) AS order_count,\n       SUM(oi.quantity * i.price) AS total_revenue,\n       ROUND(AVG(i.price), 2) AS average_price\nFROM categories c\nJOIN items i ON c.id = i.category_id\nJOIN order_items oi ON i.id = oi.item_id\nJOIN orders o ON oi.order_id = o.id\nJOIN menus m ON c.menu_id = m.id\nWHERE m.location_id = 62\n  AND (o.updated_at - INTERVAL '7 hours') >= (CURRENT_DATE - INTERVAL '90 days')\n  AND o.status = 7\n  AND i.price > 0\nGROUP BY c.name\nORDER BY total_revenue DESC;"
  },
  {
    "query": "Query revenue by menu category comparing last month to prior month (query monthly sales trends)",
    "sql": "-- Query revenue by menu category comparing last month to prior month\nSELECT \n    c.name AS category,\n    SUM(CASE \n        WHEN (o.updated_at - INTERVAL '7 hours') >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n        AND (o.updated_at - INTERVAL '7 hours') < DATE_TRUNC('month', CURRENT_DATE)\n        THEN oi.quantity * i.price \n        ELSE 0 \n    END) AS last_month_revenue,\n    SUM(CASE \n        WHEN (o.updated_at - INTERVAL '7 hours') >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months')\n        AND (o.updated_at - INTERVAL '7 hours') < DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n        THEN oi.quantity * i.price \n        ELSE 0 \n    END) AS prior_month_revenue,\n    COUNT(DISTINCT CASE \n        WHEN (o.updated_at - INTERVAL '7 hours') >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n        AND (o.updated_at - INTERVAL '7 hours') < DATE_TRUNC('month', CURRENT_DATE)\n        THEN o.id \n    END) AS last_month_orders,\n    COUNT(DISTINCT CASE \n        WHEN (o.updated_at - INTERVAL '7 hours') >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months')\n        AND (o.updated_at - INTERVAL '7 hours') < DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n        THEN o.id \n    END) AS prior_month_orders,\n    COUNT(DISTINCT CASE \n        WHEN (o.updated_at - INTERVAL '7 hours') >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n        AND (o.updated_at - INTERVAL '7 hours') < DATE_TRUNC('month', CURRENT_DATE)\n        THEN o.id \n    END) - COUNT(DISTINCT CASE \n        WHEN (o.updated_at - INTERVAL '7 hours') >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months')\n        AND (o.updated_at - INTERVAL '7 hours') < DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n        THEN o.id \n    END) AS order_count_difference,\n    ROUND((SUM(CASE \n        WHEN (o.updated_at - INTERVAL '7 hours') >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n        AND (o.updated_at - INTERVAL '7 hours') < DATE_TRUNC('month', CURRENT_DATE)\n        THEN oi.quantity * i.price \n        ELSE 0 \n    END) - SUM(CASE \n        WHEN (o.updated_at - INTERVAL '7 hours') >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months')\n        AND (o.updated_at - INTERVAL '7 hours') < DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n        THEN oi.quantity * i.price \n        ELSE 0 \n    END)) / NULLIF(SUM(CASE \n        WHEN (o.updated_at - INTERVAL '7 hours') >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months')\n        AND (o.updated_at - INTERVAL '7 hours') < DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n        THEN oi.quantity * i.price \n        ELSE 0 \n    END), 0) * 100, 2) AS revenue_percent_change\nFROM categories c\nJOIN items i ON c.id = i.category_id\nJOIN order_items oi ON i.id = oi.item_id\nJOIN orders o ON oi.order_id = o.id\nJOIN menus m ON c.menu_id = m.id\nWHERE m.location_id = 62\n  AND (o.updated_at - INTERVAL '7 hours') >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months')\n  AND (o.updated_at - INTERVAL '7 hours') < DATE_TRUNC('month', CURRENT_DATE)\n  AND o.status = 7\n  AND i.price > 0\nGROUP BY c.name\nORDER BY last_month_revenue DESC;"
  },
  {
    "query": "Hourly order distribution (hourly_order_distribution) (hourly order distribution)",
    "sql": "-- Hourly order distribution (hourly_order_distribution)\n-- Analysis of order volume by hour of day\n\nSELECT\n    EXTRACT(HOUR FROM (o.updated_at - INTERVAL '7 hours')) AS hour_of_day,\n    COUNT(*) AS order_count,\n    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders WHERE status = 7 AND location_id = 62), 2) AS percentage_of_total,\n    SUM(o.total) AS total_revenue,\n    ROUND(AVG(o.total), 2) AS avg_order_value,\n    -- Create simple visualization with asterisks\n    REPEAT('*', (COUNT(*) * 30 / (\n        SELECT MAX(order_cnt) FROM (\n            SELECT COUNT(*) AS order_cnt \n            FROM orders \n            WHERE status = 7 AND location_id = 62\n            GROUP BY EXTRACT(HOUR FROM (created_at - INTERVAL '7 hours'))\n        ) AS max_counts\n    ))::integer) AS volume_chart\nFROM\n    orders o\nWHERE\n    o.location_id = 62\n    AND o.status = 7 -- Completed orders\n    AND o.updated_at >= CURRENT_DATE - INTERVAL '90 days'\nGROUP BY\n    hour_of_day\nORDER BY\n    hour_of_day;"
  },
  {
    "query": "Item profit margin analysis (profit_margin_analysis) (item profit margin analysis)",
    "sql": "-- Item profit margin analysis (profit_margin_analysis)\n-- Analyzes menu items by their profit margin and sales volume\n\nWITH item_costs AS (\n    -- Simulated item costs (in real system, would pull from inventory/cost tables)\n    SELECT \n        i.id AS item_id,\n        i.name AS item_name,\n        i.price AS selling_price,\n        -- Simulate cost as 30-40% of selling price based on item_id\n        ROUND(i.price * (0.3 + (i.id % 10) * 0.01), 2) AS cost_price\n    FROM \n        items i\n    JOIN \n        categories c ON i.category_id = c.id\n    JOIN \n        menus m ON c.menu_id = m.id\n    WHERE \n        m.location_id = 62\n        AND i.disabled = FALSE\n),\nitem_sales AS (\n    -- Calculate sales volume and revenue by item\n    SELECT \n        i.id AS item_id,\n        COUNT(oi.id) AS order_count,\n        SUM(oi.quantity) AS units_sold,\n        SUM(i.price * oi.quantity) AS total_revenue\n    FROM \n        items i\n    JOIN \n        order_items oi ON i.id = oi.item_id\n    JOIN \n        orders o ON oi.order_id = o.id\n    JOIN \n        categories c ON i.category_id = c.id\n    JOIN \n        menus m ON c.menu_id = m.id\n    WHERE \n        m.location_id = 62\n        AND o.status = 7\n        AND o.updated_at >= CURRENT_DATE - INTERVAL '90 days'\n    GROUP BY \n        i.id\n)\n-- Join the data and calculate margins\nSELECT \n    ic.item_id,\n    ic.item_name,\n    ic.selling_price,\n    ic.cost_price,\n    ROUND(ic.selling_price - ic.cost_price, 2) AS gross_profit,\n    CASE \n        WHEN ic.selling_price = 0 THEN NULL\n        ELSE ROUND((ic.selling_price - ic.cost_price) / ic.selling_price * 100, 1)\n    END AS margin_percentage,\n    COALESCE(s.units_sold, 0) AS units_sold,\n    COALESCE(s.total_revenue, 0) AS total_revenue,\n    COALESCE(ROUND((ic.selling_price - ic.cost_price) * s.units_sold, 2), 0) AS total_profit,\n    CASE \n        WHEN COALESCE(s.units_sold, 0) > 100 AND (NULLIF(ic.selling_price, 0) IS NOT NULL AND (ic.selling_price - ic.cost_price) / NULLIF(ic.selling_price, 0) > 0.5)\n            THEN 'Star (High Volume, High Margin)'\n        WHEN COALESCE(s.units_sold, 0) > 100 \n            THEN 'Volume Driver (High Volume, Low Margin)'\n        WHEN NULLIF(ic.selling_price, 0) IS NOT NULL AND (ic.selling_price - ic.cost_price) / NULLIF(ic.selling_price, 0) > 0.5\n            THEN 'Opportunity (Low Volume, High Margin)'\n        ELSE 'Reconsider (Low Volume, Low Margin)'\n    END AS item_classification\nFROM \n    item_costs ic\nLEFT JOIN \n    item_sales s ON ic.item_id = s.item_id\nORDER BY \n    total_profit DESC;"
  }
]