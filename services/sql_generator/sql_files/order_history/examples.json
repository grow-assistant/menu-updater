[
  {
    "query": "Specific date orders",
    "sql": "SELECT \n    COUNT(*) as order_count\nFROM \n    orders o\nWHERE \n    o.location_id = 62\n    AND o.status = 7\n    AND (o.updated_at - INTERVAL '7 hours')::date = TO_DATE('2/21/2025', 'MM/DD/YYYY');\n\nSELECT\n    o.id AS order_id,\n    u.first_name || ' ' || u.last_name AS customer_name,\n    o.total AS order_total,\n    to_char((o.updated_at - INTERVAL '7 hours'), 'YYYY-MM-DD HH24:MI:SS') AS updated_at,\n    o.status AS order_status\nFROM \n    orders o\nJOIN \n    users u ON o.customer_id = u.id\nWHERE \n    o.location_id = 62\n    AND o.status = 7\n    AND (o.updated_at - INTERVAL '7 hours')::date = TO_DATE('2/21/2025', 'MM/DD/YYYY')\nORDER BY \n    o.updated_at;"
  },
  {
    "query": "Yesterdays order details",
    "sql": "SELECT\n    o.id AS order_id,\n    to_char(o.updated_at - INTERVAL '7 hours', 'YYYY-MM-DD HH24:MI') AS updated_at,\n    u.first_name || ' ' || u.last_name AS customer,\n    regexp_replace(u.phone, '(\\d{3})(\\d{3})(\\d{4})', '(\\1) \\2-\\3') AS user_phone,\n    u.email AS user_email,\n    o.total AS order_total,\n    CAST(o.tip AS DECIMAL(10,2)) as tip,\n    COALESCE(d.amount, 0) as discount_amount,\n    o.status AS order_status\nFROM orders o\nINNER JOIN users u ON o.customer_id = u.id\nINNER JOIN locations l ON l.id = o.location_id\nLEFT JOIN discounts d on d.order_id = o.id\nWHERE l.id = 62\n  AND o.status = 7\n  AND (o.updated_at - INTERVAL '7 hours')::date = CURRENT_DATE - INTERVAL '1 day';"
  },
  {
    "query": "Monthly sales revenue",
    "sql": "SELECT COALESCE(SUM(total), 0) as total_revenue\nFROM orders\nWHERE location_id = 62\n  AND (updated_at - INTERVAL '7 hours')::date >= CURRENT_DATE - INTERVAL '1 month'\n  AND status = 7;"
  },
  {
    "query": "Current month revenue",
    "sql": "SELECT COALESCE(SUM(total), 0) as current_month_revenue\nFROM orders\nWHERE location_id = 62\n  AND date_trunc('month', (updated_at - INTERVAL '7 hours')) = date_trunc('month', CURRENT_DATE)\n  AND status = 7;"
  },
  {
    "query": "Last year same month revenue",
    "sql": "SELECT COALESCE(SUM(total), 0) as last_year_same_month_revenue\nFROM orders\nWHERE location_id = 62\n  AND date_trunc('month', (updated_at - INTERVAL '7 hours')) = date_trunc('month', CURRENT_DATE - INTERVAL '1 year')\n  AND status = 7;"
  },
  {
    "query": "Top menu items by revenue",
    "sql": "SELECT i.name as menu_item, COUNT(oi.id) as order_count,\n       COALESCE(SUM(i.price * oi.quantity), 0) as revenue\nFROM orders o\nJOIN order_items oi ON o.id = oi.order_id\nJOIN items i ON oi.item_id = i.id\nWHERE o.location_id = 62\n  AND (o.updated_at - INTERVAL '7 hours')::date >= CURRENT_DATE - INTERVAL '3 months'\n  AND o.status = 7\nGROUP BY i.name\nORDER BY revenue DESC\nLIMIT 5;"
  },
  {
    "query": "New customers past week",
    "sql": "WITH first_orders AS (\n    SELECT customer_id, MIN((updated_at - INTERVAL '7 hours')::date) as first_updated_at\n    FROM orders\n    WHERE location_id = 62\n      AND status = 7\n    GROUP BY customer_id\n)\nSELECT COUNT(*) as new_customers\nFROM first_orders\nWHERE first_updated_at >= CURRENT_DATE - INTERVAL '7 days';"
  },
  {
    "query": "Percentage repeat customer orders",
    "sql": "WITH customer_orders AS (\n    SELECT customer_id, COUNT(*) as order_count\n    FROM orders\n    WHERE location_id = 62\n      AND status = 7\n    GROUP BY customer_id\n),\nrepeat_customers AS (\n    SELECT customer_id\n    FROM customer_orders\n    WHERE order_count > 1\n)\nSELECT \n    ROUND(\n        (SELECT COUNT(*) FROM orders o \n         WHERE o.location_id = 62 AND o.status = 7 \n           AND o.customer_id IN (SELECT customer_id FROM repeat_customers)\n        ) * 100.0\n        / NULLIF((SELECT COUNT(*) FROM orders o \n                  WHERE o.location_id = 62 AND o.status = 7), 0),\n        0\n    ) || '%' AS repeat_percentage;"
  },
  {
    "query": "Canceled orders past month",
    "sql": "SELECT COUNT(*) as canceled_orders\nFROM orders\nWHERE location_id = 62\n  AND (updated_at - INTERVAL '7 hours')::date >= CURRENT_DATE - INTERVAL '1 month'\n  AND status IN (6);"
  },
  {
    "query": "Avg time between orders",
    "sql": "WITH first_two_orders AS (\n  SELECT customer_id, created_at,\n         ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY created_at) AS order_num\n  FROM orders\n  WHERE location_id = 62\n    AND status = 7\n),\nfirst_second AS (\n  SELECT customer_id,\n         MIN(CASE WHEN order_num = 1 THEN created_at END) AS first_order,\n         MIN(CASE WHEN order_num = 2 THEN created_at END) AS second_order\n  FROM first_two_orders\n  GROUP BY customer_id\n)\nSELECT ROUND(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY EXTRACT(EPOCH FROM (second_order - first_order))/(3600*24)))\n       AS average_days_between_first_and_second\nFROM first_second\nWHERE second_order IS NOT NULL;"
  },
  {
    "query": "Lifetime customer value",
    "sql": "SELECT TO_CHAR(AVG(total_spent), 'FM$999,999,990.00') as avg_lifetime_value\nFROM (\n    SELECT customer_id, SUM(total) as total_spent\n    FROM orders\n    WHERE location_id = 62\n      AND status = 7\n    GROUP BY customer_id\n) sub;"
  },
  {
    "query": "Order details with discount",
    "sql": "SELECT\n    l.id,\n    l.name as location_name,\n    o.id AS order_id,\n    o.status AS order_status,\n    o.total AS order_total,\n    u.id AS user_id,\n    u.phone AS user_phone,\n    u.email AS user_email,\n    o.updated_at - INTERVAL '7 hours' AS updated_at,\n    o.tip as tip,\n    u.first_name || ' ' || u.last_name AS customer,\n    d.amount as discount_amount\nFROM orders o\nINNER JOIN users u ON o.customer_id = u.id\nINNER JOIN locations l ON l.id = o.location_id\nLEFT JOIN discounts d on d.order_id = o.id\nWHERE l.id = 62\n  AND o.status = 7\n  AND (o.updated_at - INTERVAL '7 hours')::date >= CURRENT_DATE - INTERVAL '1 day'\n  AND d.amount > 0;"
  },
  {
    "query": "Customer order frequency",
    "sql": "WITH customer_orders AS (\n    SELECT\n        o.customer_id,\n        u.first_name || ' ' || u.last_name AS customer_name,\n        u.phone,\n        u.email,\n        COUNT(o.id) AS total_orders,\n        MIN(o.updated_at) AS first_updated_at,\n        MAX(o.updated_at) AS last_updated_at,\n        AVG(o.total) AS avg_order_value,\n        SUM(o.total) AS total_spent\n    FROM\n        orders o\n    JOIN\n        users u ON o.customer_id = u.id\n    WHERE\n        o.location_id = 62\n        AND o.status = 7\n        AND o.updated_at >= CURRENT_DATE - INTERVAL '180 days'\n    GROUP BY\n        o.customer_id, u.first_name, u.last_name, u.phone, u.email\n    HAVING\n        COUNT(o.id) >= 3\n),\nfrequency_metrics AS (\n    SELECT\n        co.*,\n        (last_updated_at - first_updated_at) AS customer_lifespan,\n        CASE \n            WHEN (last_updated_at - first_updated_at) > INTERVAL '0 days' \n            THEN total_orders / EXTRACT(EPOCH FROM (last_updated_at - first_updated_at)) * 86400 \n            ELSE 0 \n        END AS orders_per_day,\n        CASE \n            WHEN (last_updated_at - first_updated_at) > INTERVAL '0 days' \n            THEN EXTRACT(EPOCH FROM (last_updated_at - first_updated_at)) / total_orders / 86400\n            ELSE 0 \n        END AS avg_days_between_orders\n    FROM \n        customer_orders co\n)\nSELECT\n    customer_name,\n    phone,\n    email,\n    total_orders,\n    first_updated_at,\n    last_updated_at,\n    EXTRACT(DAY FROM customer_lifespan)::integer AS days_as_customer,\n    ROUND(avg_order_value::numeric, 2) AS avg_order_value,\n    ROUND(total_spent::numeric, 2) AS total_spent,\n    ROUND(avg_days_between_orders::numeric, 1) AS avg_days_between_orders,\n    CASE\n        WHEN avg_days_between_orders <= 7 THEN 'Weekly Customer'\n        WHEN avg_days_between_orders <= 14 THEN 'Bi-Weekly Customer'\n        WHEN avg_days_between_orders <= 30 THEN 'Monthly Customer'\n        ELSE 'Occasional Customer'\n    END AS frequency_segment,\n    EXTRACT(DAY FROM (CURRENT_TIMESTAMP - last_updated_at))::integer AS days_since_last_order,\n    CASE \n        WHEN EXTRACT(DAY FROM (CURRENT_TIMESTAMP - last_updated_at))::integer > \n             (avg_days_between_orders * 2) \n        THEN 'At Risk'\n        ELSE 'Active'\n    END AS status\nFROM\n    frequency_metrics\nORDER BY\n    avg_days_between_orders;"
  },
  {
    "query": "Order item combination analysis",
    "sql": "WITH order_items_list AS (\n    SELECT\n        o.id AS order_id,\n        o.updated_at AS updated_at,\n        i1.id AS item1_id,\n        i1.name AS item1_name,\n        i2.id AS item2_id,\n        i2.name AS item2_name\n    FROM\n        orders o\n    JOIN\n        order_items oi1 ON o.id = oi1.order_id\n    JOIN\n        items i1 ON oi1.item_id = i1.id\n    JOIN\n        order_items oi2 ON o.id = oi2.order_id\n    JOIN\n        items i2 ON oi2.item_id = i2.id\n    JOIN\n        categories c1 ON i1.category_id = c1.id\n    JOIN\n        categories c2 ON i2.category_id = c2.id\n    JOIN\n        menus m ON c1.menu_id = m.id\n    WHERE\n        o.location_id = 62\n        AND o.status = 7\n        AND o.updated_at >= CURRENT_DATE - INTERVAL '90 days'\n        AND i1.id < i2.id\n),\nitem_stats AS (\n    SELECT\n        i.id AS item_id,\n        i.name AS item_name,\n        COUNT(DISTINCT o.id) AS order_count\n    FROM\n        orders o\n    JOIN\n        order_items oi ON o.id = oi.order_id\n    JOIN\n        items i ON oi.item_id = i.id\n    JOIN\n        categories c ON i.category_id = c.id\n    JOIN\n        menus m ON c.menu_id = m.id\n    WHERE\n        o.location_id = 62\n        AND o.status = 7\n        AND o.updated_at >= CURRENT_DATE - INTERVAL '90 days'\n    GROUP BY\n        i.id, i.name\n)\nSELECT\n    oil.item1_name,\n    oil.item2_name,\n    COUNT(DISTINCT oil.order_id) AS times_ordered_together,\n    ROUND(\n        COUNT(DISTINCT oil.order_id)::numeric / LEAST(s1.order_count, s2.order_count) * 100,\n        2\n    ) AS co_occurrence_rate,\n    ROUND(\n        COUNT(DISTINCT oil.order_id)::numeric / (s1.order_count + s2.order_count - COUNT(DISTINCT oil.order_id)) * 100,\n        2\n    ) AS jaccard_similarity\nFROM\n    order_items_list oil\nJOIN\n    item_stats s1 ON oil.item1_id = s1.item_id\nJOIN\n    item_stats s2 ON oil.item2_id = s2.item_id\nGROUP BY\n    oil.item1_name, oil.item2_name, s1.order_count, s2.order_count\nHAVING\n    COUNT(DISTINCT oil.order_id) >= 5\nORDER BY\n    times_ordered_together DESC\nLIMIT 20;"
  },
  {
    "query": "Cancelled orders",
    "sql": "SELECT\n    o.id AS order_id,\n    to_char(o.updated_at - INTERVAL '7 hours', 'YYYY-MM-DD HH24:MI') AS updated_at,\n    u.first_name || ' ' || u.last_name AS customer,\n    regexp_replace(u.phone, '(\\d{3})(\\d{3})(\\d{4})', '(\\1) \\2-\\3') AS user_phone,\n    u.email AS user_email,\n    o.total AS order_total,\n    CAST(o.tip AS DECIMAL(10,2)) as tip,\n    COALESCE(d.amount, 0) as discount_amount,\n    o.status AS order_status\nFROM orders o\nINNER JOIN users u ON o.customer_id = u.id\nINNER JOIN locations l ON l.id = o.location_id\nLEFT JOIN discounts d on d.order_id = o.id\nWHERE l.id = 62\n  AND o.status = 6\n  AND o.updated_at > CURRENT_TIMESTAMP - INTERVAL '1 day'"
  }
]